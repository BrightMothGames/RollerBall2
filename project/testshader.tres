[gd_resource type="VisualShader" load_steps=6 format=2]

[sub_resource type="VisualShaderNodeExpression" id=1]
size = Vector2( 914, 783 )
expression = "vec3 uv;
uv = fragcoord/viewport_size;
uv = uv * (viewport_size/size);
uv = mod(uv,1.0);

vec3 col = uv;
col = round(col);
col.z = col.x + col.y;
col.z /= 2.;
col.z = fract(col.z);
col.z *= 2.;

alpha = col.z;"

[sub_resource type="VisualShaderNodeColorConstant" id=2]
constant = Color( 0.554688, 0.0991084, 0.0991084, 1 )

[sub_resource type="VisualShaderNodeGlobalExpression" id=5]
size = Vector2( 490, 224 )
expression = "uniform float size;"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "viewport_size"

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "fragcoord"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;



// GlobalExpression:0
	uniform float size;

void vertex() {
// Output:0

}

void fragment() {
// Color:12
	vec3 n_out12p0 = vec3(0.554688, 0.099108, 0.099108);
	float n_out12p1 = 1.000000;

// Input:7
	vec3 n_out7p0 = FRAGCOORD.xyz;

// Input:5
	vec3 n_out5p0 = vec3(VIEWPORT_SIZE, 0.0);

// Expression:10
	float n_out10p0;
	n_out10p0 = 0.0;
	{
		vec3 uv;
		uv = n_out7p0/n_out5p0;
		uv = uv * (n_out5p0/size);
		uv = mod(uv,1.0);
		
		vec3 col = uv;
		col = round(col);
		col.z = col.x + col.y;
		col.z /= 2.;
		col.z = fract(col.z);
		col.z *= 2.;
		
		n_out10p0 = col.z;
	}

// Output:0
	ALBEDO = n_out12p0;
	ALPHA = n_out10p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -74.6667, -199.333 )
nodes/fragment/0/position = Vector2( 2200, -300 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( 20, -140 )
nodes/fragment/7/node = SubResource( 4 )
nodes/fragment/7/position = Vector2( 20, -240 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 560, -260 )
nodes/fragment/10/size = Vector2( 914, 783 )
nodes/fragment/10/input_ports = "0,1,fragcoord;1,1,viewport_size;"
nodes/fragment/10/output_ports = "0,0,alpha;"
nodes/fragment/10/expression = "vec3 uv;
uv = fragcoord/viewport_size;
uv = uv * (viewport_size/size);
uv = mod(uv,1.0);

vec3 col = uv;
col = round(col);
col.z = col.x + col.y;
col.z /= 2.;
col.z = fract(col.z);
col.z *= 2.;

alpha = col.z;"
nodes/fragment/12/node = SubResource( 2 )
nodes/fragment/12/position = Vector2( 1840, -140 )
nodes/fragment/13/node = SubResource( 5 )
nodes/fragment/13/position = Vector2( -80, 200 )
nodes/fragment/13/size = Vector2( 490, 224 )
nodes/fragment/13/input_ports = ""
nodes/fragment/13/output_ports = ""
nodes/fragment/13/expression = "uniform float size;"
nodes/fragment/connections = PoolIntArray( 5, 0, 10, 1, 7, 0, 10, 0, 12, 0, 0, 0, 10, 0, 0, 1 )
